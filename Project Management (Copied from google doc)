Cell phone/data plan

Idea: Trivago for cell phones/data plans
Name: CellCearch (Pronounced cell - search)
Client: Alia Nichol

See Slide Included

BASIC DESCRIPTION/SOFTWARE REQUIREMENTS:
This software will take basic knowledge from any given client, and based on an algorithm of data, it will make a list of possible data plans for the user’s cellphone that may be best suited for them. Variables will be considered such as monthly budget, plan preference(Data, Pay as you go, etc.), and phone preference (Do you have a cell phone already or are you buying one new). 

The program will start up with a frame introducing the user to the program and then proceed to ask a few basic questions to the user. These questions will consist of information such as:
What is your monthly budget?
What do you want out of your plan? (Data, pay as you go, etc.)
And a couple more questions

Once the program has gathered all data, various links to real life data plans will appear to the user based on an algorithm.  At this point the user will have to browse the presented plans and see which ones are best suited for them. Once the user has selected a plan that they like, they will click on a link that will take them straight to that company’s website/page. And they can purchase the plan.

SKILLS NEEDED:
Data Sorting
GUI Interface
Animations
Management of frames

CUSTOMER REQUIREMENTS:
Visuals
Easy to use
Efficient
Output appropriate data when needed

SCHEDULE:
Week 1: Brainstorm ideas and start creating plan, including a basic algorithm
Week 2: Research programming skills needed for app and create detailed algorithm and basic uml diagram (OOP)
Week 3: Based on algorithm and uml diagram, begin to program
Week 4 and beyond: Continue coding until final product matches clients needs
Final Week: Final touches, including perfecting aesthetics, etc...

LOG:
December 3rd, 2018:
Idea generated for summative
Start of basic layout

December 6th, 2018:
Research done on possible companies and websites

December 8th, 2018:
Project Management tool created: Github Repository

December 10th, 2018:
Began photoshop work for aesthetics (first bg screen)
Completed basic algorithm and planning work

December 11th-14th, 2018:
Began programming splash screen
Completed major photoshop work, including BG for splash screen and company logo. 

December 15th-16th, 2018:
Started detailed algorithm and main programming for product

Jan 7th, 2019:
Gathering data sets for the program

Jan 20th, 2019:
Program progress made, nearing completion…

Jan 21st, 2019:
Program finished, bug testing for final fixes, will be done today.

WEBSITE LINKS:
https://www.fido.ca/nac/?icid=bu-hptnnac-ssbhfcwrls-07ddyy6#/choose-phone (FIDO)
https://www.rogers.com/consumer/wireless (ROGERS)
https://www.bell.ca/Mobility/Cell_phone_plans (BELL)
https://www.telus.com/en/mobility/plans (TELUS)
https://www.virginmobile.ca/en/plans/postpaid.html?province=ON&geoResult=ON#!/ (VIRGIN MOBILE CANADA)
https://www.koodomobile.com/rate-plans (KOODO MOBILE)

NOTE: these are links to a list of plans, not individual links to an individual plan.

DIRECT LINKS TO PHONES:

LINK:
PHONE NAME
PLAN(S)
FEATURES
COMPANY
https://www.fido.ca/nac/?icid=bu-hptnnac-ssbhfcwrls-07ddyy6#/build-plan


iPhone 8
PRICE RANGE:
45-140$ Monthly

0$ 2-year term (long term plans)

OR

149$ or 549$ 2-year term (short plans)
OR
849$ no term
64 GB’s OR 256 GB’s
FIDO
https://www.fido.ca/nac/?icid=bu-hptnnac-ssbhfcwrls-07ddyy6#/build-plan


Samsung Galaxy A8
PRICE RANGE:
45-130$ Monthly

0$ 2-year term

OR

99$ 2-year term

OR

699$ no term
32GB’s
FIDO
https://www.fido.ca/nac/?icid=bu-hptnnac-ssbhfcwrls-07ddyy6#/build-plan


LG G7 One
45-140$ Monthly

0$ 2-year term

OR

119$ 2-year term

OR

799 no term
32 GB’s
FIDO
https://www.fido.ca/nac/?icid=bu-hptnnac-ssbhfcwrls-07ddyy6#/build-plan


iPhone X
45-140$ Monthly

0$ 2-year term

OR

199$ 2-year term

OR

399$ 2-year term

OR

549$ 2-year term

OR

979$ 2-year term

OR 

1279$ no term
64 GB’s OR 256 GB’s
FIDO
https://www.rogers.com/web/totes/wireless/#/build-plan


iPhone XR
25-445$ Monthly 

0$ 2-year term

OR

129$ 2-year term

OR

329$ 2-year term

OR

549$ 2-year term

OR

1029$ 2-year term

OR

1029$ no term
64 GB’s OR
128 GB’s OR
256 GB’s
ROGERS
https://www.rogers.com/web/totes/wireless/#/build-plan


iPhone XS
25-445$ Monthly

299$ 2-year term

OR

499$ 2-year term

OR

699$ 2-year term

OR

1009$ 2-year term

OR

1379$ 2-year term

OR

1379$ no term
64 GB’s OR
256 GB’s OR 512 GB’s
ROGERS
https://www.rogers.com/web/totes/wireless/#/build-plan


Samsung Galaxy S9
25-445$ Monthly

0$ 2-year term

OR

199$ 2-year term

OR

349$ 2-year term

OR

1019$ 2-year term

OR

1019$ no term
64 GB’s
ROGERS
https://www.rogers.com/web/totes/wireless/#/build-plan


Google Pixel 3
25-445$ Monthly

0$ 2-year term

OR

99$ 2-year term

OR
249$ 2-year term

OR

999$ 2-year term

OR

1099$ no term
64 GB’s OR 
128GB’s
ROGERS
https://www.telus.com/en/mobility/plans#individual-plans


INDIVIDUAL PLANS FOR SIM CARDS!
15-105$ Monthly
CANADA- CHINA (105$/M)
TELUS
https://www.virginmobile.ca/en/phones/phone-details.html#!/gsa8/Black/32/TR6


Samsung Galaxy A8
35-105$ Monthly

0$ 2-year term

OR

99.99$ 2-year term

OR

599$ no term
32 GB’s
VIRGIN MOBILE CANADA
https://www.virginmobile.ca/en/phones/phone-details.html#!/galaxys8/Black/64/TR18


Samsung Galaxy S8
35-115$ Monthly

0$ 2-year term

OR
149.99$ 2-year term

OR

269.99$ 2-year term

OR

849.99$ no term


64 GB’s
VIRGIN MOBILE CANADA
https://www.virginmobile.ca/en/phones/phone-details.html#!/p20huawei/Black/128/TR6


Huawei P20
35-105$ Monthly

0$ 2-year term

OR

119.99$ 2-year term

OR

749.99$ 2-year term
128 GB’s
VIRGIN MOBILE CANADA
https://www.koodomobile.com/rate-plans




35-100$ Monthly


KOODO






















GENERAL ALGORITHM:
Get input from user on monthly budget and plan type using drop down boxes
Depending on selections of user, set variable
Get input from user whether a new phone has to be bought
If yes, set variable positive
If no, set variable negative
Wait for user to click continue
Depending on value of variable, output text of best option from data
Wait for user to click back or close application

PSEUDOCODE:

LOADING SCREEN:

Package mainFrame;

Import required imports for program;

Public class “Loadscreen” extends Jframe;

	Private Jpanel contentpane;

	Public Static void main
	
		Eventqueue (new(runnable{

		Public void run{

			Try{

			Loadscreen frame = new loadscreen();
			frame.setVisible(true);
			}catch (Exception e){

				e.printStackTrace();

		}} (Close code block here)

Public Loadscreen(){

	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	setBounds ();
	New pane = new jpanel();
	contentpane.setBorder();
	contentpane.setLayout();
	setContentpane(contentpane);

	Jlabel Label = new JLabel(“”);
	Image img2 = new ImageIcon(Image Address);
	label.setIcon(new ImageIcon(img2));
	contentpane.add (label, borderlayout.CENTER);

}}


MAINFRAME CODE:

Package mainFrame;

Import required imports here;

Public class MainFrame{

	Static JFrame frame;
	private JTextField txtCellcearch;
	private JTextField txtOnePlaceFor;
	private JTextField txtrWhatTypeOf;
	private JTextField txtrWhatType;
	private JComboBox planPick;
	private JTextArea txtrDoYouNeed;
	private JComboBox tabPick;

// launch application

Public static void main{

	LoadScreen 1s = new LoadScreen();
	1s.setVisable(true);
	try{

		Delay (5 seconds);
		1s.dispose();
	}
	catch(InterruptedException e2){
		e2.printStackTract();
	}

	EventQueue.invokeLater(new Runnable() {

		Public void run(){

			try {

				MainFrame window = new frame();
				window.frame.setVisable(true);
			}catch (Exception e){
				e.printStackTrace()’
			}
	}}}} // close code block here


// creating the windows and application appeal


Public MainFrame(){
	initialize();
}
String budget;
String plan;
String tab;
static int count;

// set up frame contents

public void checker(){
	If (budget == “Below 50$”){
		if (plan == “Data + Talk + Text”){
		if(tab == “yes”) {
			count = 1;
		}
		else {
			count = -1;

}}
If (plan == “Data Only”) {

		if (tab == “yes”){
			count = 2;
		}
		else {
			count = -2;
		}
}

If (plan == “Talk + Text”){
		if(tab == “yes”){
			count = 3;
		}
		else {
			count =3;
}}}

	If (budget == “50$ - 90$”){
		if (plan == “Data + Talk + Text”){
		if(tab == “yes”) {
			count = 4;
		}
		else {
			count = -4;

}}
If (plan == “Data Only”) {

		if (tab == “yes”){
			count = 5;
		}
		else {
			count = -5;
		}
}

If (plan == “Talk + Text”){
		if(tab == “yes”){
			count = 6;
		}
		else {
			count = -6;
}}}

	If (budget == “ 90$ - 130$”){
		if (plan == “Data + Talk + Text”){
		if(tab == “yes”) {
			count = 7;
		}
		else {
			count = -7;

}}
If (plan == “Data Only”) {

		if (tab == “yes”){
			count = 8;
		}
		else {
			count = -8;
		}
}

If (plan == “Talk + Text”){
		if(tab == “yes”){
			count = 9;
		}
		else {
			count =-9;
}}}

	If (budget == “130$+”){
		if (plan == “Data + Talk + Text”){
		if(tab == “yes”) {
			count = 10;
		}
		else {
			count = -10;

}}
If (plan == “Data Only”) {

		if (tab == “yes”){
			count = 11;
		}
		else {
			count = -11;
		}
}

If (plan == “Talk + Text”){
		if(tab == “yes”){
			count = 12;
		}
		else {
			count =-12;
}}}




// setting up framework and layout


private void initialize(){

	Frame = new JFrame();
	frame.setbounds(boundaries here);
	frame.setDefaultCloseOpertation(JFrame.EXIT_ON_CLOSE);
	frame.getContentPane().setLayout(null);

	txtCellcearch = new TextField();
	txtCellcearch .setEditable(false);
	txtCellcearch .SetFont ( new Font( font name, bold factor, size ));
	txtCellcearch .setHorizonAlignment( Set alingment here );
	txtCellcearch .setText(“CellCearch”);
	txtCellcearch .setBound( set boundaries here );
	frame.getContentPane().add(txtCellcearch );
	txtCellcearch .setColumns ( Columns # here );

	CONTINUE TO SET UP NEEDED TEXT BLOCKS LIKE THIS

// after text blocks have been setup

	JComboBox budgetPick = new JComboBox():
	budgetPick.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e){
			Budget = (budgetPick.getSelectedItem()).toString();
}
}};
budgetPick.setModel(new DefaultComboBoxModel(new String[] {“Content”, “Content here”}));
budgetPick.setToolTipText(“”);
budgetPick.setBounds (boundaries here);
frame.getContentPane().add(budgetPick);
Image img = new ImageIcon(Image source here)

	CONTINUE TO SET UP NEEDED DROP DOWN MENUS LIKE THIS
JButton btnContinue = new JButton(“Continue”);
btnContinue.addActionListener(new ActionListener(){ 	
public void actionPerformed(ActionEvent e){

	checker();
	If (count <=12) { 
		MainFrame.frame.dispose();
		Plans plan = new Plans();
		plan.setVisible(true);
}
}
});
btnContinue.setBounds (boundaries here);
frame.getContentPane().add(btnContinue);

JLabel label = new JLabel(“”);
label.setIcon(new ImageIcon(img));
Label.setbounds (boundaries here);
frame.getContentPane().add(label);


	
PLANS:

	package mainFrame;
	
	Import needed imports here;

	Public class Plans extends JFrame{


		private JPanel contentPane;

		public static void main method {

			public void run() {
				
				try {

					Plans frame = new Plans();
							frame.setVisable(true);
						}catch (Exception e) {
							e.printStackTrace();

}}
});
}

		If (MainFrame.count == 1) {
			JTextArea txtOption = new JTextArea();
			txtrOption.set needed details (edibility, size, etc.);
			contentPane.add(txtrOption);
			
			JTextArea txtrOption 2 = new JTextArea();
			txtrOption2.set needed details (edibility, size, etc.);
			contentPane.add(txtrOption2);
	}

			CONTINUE TO SET UP IF STATEMENTS LIKE THIS UNTIL ALL POSSIBLE OUTCOMES ARE MET THAT MEET REQUIREMENTS FROM USERS.

		Image img3 = new ImageIcon(get image source here);
		
		JButton btnBack = new JButton (“Back”);
		btnBack.addActionListener(new Actionlistener() {
			Public void actionPerformed(ActionEvent e) {
				MainFrame.frame.setVisible(true);
			}

		});
		btnBack.setBounds (Boundaries here);
		contentPane.add(btnBack);


		JLabel label = new JLabel(“”);
		label.setIcon(new ImageIcon(img3));
		label.setBounds (boundaries here);
		contentPane.add(label);

}}
	
MODIFIED UML DIAGRAM:

Classes
MainFrame
Plans extends JFrame
LoadScreen extends JFrame
States (attributes)
budget()
plan()
tab()

N/A

N/A

Behaviors (methods)


main()
MainFrame()
checker()
initialize()




LoadScreen()


Plans()


PEER TESTING:

Ovais: Viewed production of program from the early stages and seemed to show some interest in it. Was satisfied with program even with a few bugs found here and there. 
Michael: Viewed production of program during early development and showed much interest during trial uses and tests of the program. He was curious to see the thought process behind it and how we were developing it. Seemed to be happy once he finished testing it.
Alex: Although little interest was shown in the project, he was surprised with how smooth everything ran and how detailed the code was. He wasn’t able to find any bugs during testing which meant good news for us. Although it seemed like he wasn’t interested, he had no issues participating.
Satsang: Was very interested in the program, and was actually a helping hand in the developing process whenever we ran into a dead end. He was happy to lend us a hand from time to time and give us critical feedback on the code and software appearance. A very helpful tester who made this program better than what we likely would’ve gotten on our own.

CUSTOMER REVIEW:
Overall well done application
Easily usable, nice graphics, very smooth
Good purpose since everyone has a smartphone and they all want the best deal
